@using DearCoder.Services
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common
@model IPagedList<Post>
@inject IFileService _fileService

@{
    ViewData["Title"] = "Landing Page";
}
<!--Copy body of template landing page here-->
<!-- main content-->
<div class="container">
    <div class="row">
        <div class="col-lg-8 col-md-10 mx-auto">
            <h1 class="mb-3">
                <!--WHY CAN'T I GET THIS TO DISPLAY? DO I NEED TO USE A VIEWMODEL AGAIN? Okay, I know it's because I'm using the IEnumerable interface,
                and that's iterating over all the instances of posts, but all of them on this page share the same foreign key, so how can I access that
                property alone and display it?-->
                At post.BlogId
            </h1>
            <hr />
            @foreach (var post in Model.OrderByDescending(c => c.Created))
            {
                <div class="post-preview row">
                    <div class="col">
                        <a asp-controller="Posts" asp-action="Details" asp-route-slug="@post.Slug">
                            <h2 class="post-title">@post.Title</h2>
                            <h3 class="post-subtitle">@post.Abstract</h3>
                        </a>
                        <p class="post-meta">
                            posted by
                            <a href="https://kaseywahl.io/about.html" target="_blank">Kasey Wahl</a>
                            on @post.Created.ToString("MMM, dd, yyyy")
                        </p>
                        <div class="col">
                            <a class="btn btn-dark btn-sm btn-block" asp-controller="Posts" asp-action="Details" asp-route-slug="@post.Slug">Read Full Post</a>
                        </div>
                    </div>
                    <div class="col">
                        <img id="BlogImage" class="img-fluid" src=" @_fileService.DecodeImage(post.ImageData, post.ContentType)" />
                    </div>
                    <div class="row">

                    </div>
                </div>
                <hr />
            }


            <hr />
            <!-- Paged List pager-->
            <div class="row">
                <div class="col h4">
                    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                </div>
            </div>

            <div class="row">
                <div class="col">
                    @Html.PagedListPager(Model, page => Url.Action("Index", new { page = page }),
                        new PagedListRenderOptions
                        {
                            LiElementClasses = new string[] { "page-item" },
                            PageClasses = new String[] { "page-link" }
                        })
                </div>
            </div>
        </div>
    </div>
</div>
<hr />

